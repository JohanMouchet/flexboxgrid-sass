/**
 * Flexboxgrid-sass: https://github.com/JohanMouchet/flexboxgrid-sass
 */

/* Config (editable) */
$grid-division: 12;
$grid-gutter: 1rem;
$grid-gutter-lg: $grid-gutter * 2;
$grid-half-gutter: $grid-gutter / 2;
$grid-half-gutter-lg: $grid-gutter-lg / 2;
$grid-outer-margin: 2rem;

@import 'flexboxgrid-debug'; // Optional

// Breakpoints (Mobile first)
$grid-breakpoints: (
	// (xs : Extra small devices (phones): 0 and up)
	sm: 425px, // Small devices (tablets): 425px and up
	md: 768px, // Medium devices (desktops): 768px and up
	lg: 1024px, // Large devices (large desktops): 1024px and up
	xl: 1366px, // Extra large devices (extra large desktops): 1366px and up
);

/* Container */
.container {
	box-sizing: border-box;
	width: 100%;
	margin-left: auto;
	margin-right: auto;
	padding-left: $grid-outer-margin;
	padding-right: $grid-outer-margin;
	position: relative;
}

/** Sizes **/
@each $bp-short, $bp-size in $grid-breakpoints {
	.container--#{$bp-short} {
		max-width: #{$bp-size};
	}
}

/** No gutters **/
.container--noGutter {
	padding-left: 0;
	padding-right: 0;
}

/* Grid */
.grid {
	box-sizing: border-box;
	display: flex;
	flex-wrap: wrap;
	margin-left: - $grid-half-gutter;
	margin-right: - $grid-half-gutter;
}

@mixin grid-generation($bp-short) {
	/** Direction **/
	.g--#{$bp-short}-row {
		flex-direction: row;
	}

	.g--#{$bp-short}-rowReverse {
		flex-direction: row-reverse;
	}

	/** Wrap **/
	.g--#{$bp-short}-wrap {
		flex-wrap: wrap;
	}

	.g--#{$bp-short}-noWrap {
		flex-wrap: nowrap;
	}

	/** Gutters **/
	/*** Large ***/
	.g--#{$bp-short}-lgGutter {
		margin-left: - $grid-half-gutter-lg;
		margin-right: - $grid-half-gutter-lg;

		> .cell {
			padding-left: $grid-half-gutter-lg;
			padding-right: $grid-half-gutter-lg;
		}
	}

	/** None **/
	.g--#{$bp-short}-noGutter {
		margin-left: 0;
		margin-right: 0;

		> .cell {
			padding-left: 0;
			padding-right: 0;
		}
	}

	/** Justification X axis **/
	.g--#{$bp-short}-xStart {
		justify-content: flex-start;
	}

	.g--#{$bp-short}-xCenter {
		justify-content: center;
	}

	.g--#{$bp-short}-xEnd {
		justify-content: flex-end;
	}

	.g--#{$bp-short}-xAround {
		justify-content: space-around;
	}

	.g--#{$bp-short}-xBetween {
		justify-content: space-between;
	}

	/** Justification Y axis **/
	.g--#{$bp-short}-yStretch {
		align-items: stretch;
	}

	.g--#{$bp-short}-yStart {
		align-items: flex-start;
	}

	.g--#{$bp-short}-yCenter {
		align-items: center;
	}

	.g--#{$bp-short}-yEnd {
		align-items: flex-end;
	}

	/** Justification Y axis when wrapped: Z **/
	.g--#{$bp-short}-zStretch {
		align-content: stretch;
	}

	.g--#{$bp-short}-zStart {
		align-content: flex-start;
	}

	.g--#{$bp-short}-zCenter {
		align-content: center;
	}

	.g--#{$bp-short}-zEnd {
		align-content: flex-end;
	}

	.g--#{$bp-short}-zAround {
		align-content: space-around;
	}

	.g--#{$bp-short}-zBetween {
		align-content: space-between;
	}
}

/** Grid generation **/
@include grid-generation('xs');

@each $bp-short, $bp-size in $grid-breakpoints {
	@media (min-width: $bp-size) {
		@include grid-generation($bp-short);
	}
}

/* Cells */
.cell {
	box-sizing: border-box;
	flex: 0 1 auto;
	padding-left: $grid-half-gutter;
	padding-right: $grid-half-gutter;
}

@mixin cell-generation($bp-short) {
	/** Sizes **/
	@for $i from 1 through $grid-division {
		.c--#{$bp-short}-#{$i} {
			flex-basis: percentage($i / $grid-division);
			max-width: percentage($i / $grid-division);
		}
	}

	/** Collapsed **/
	.c--#{$bp-short}-0 {
		flex-grow: 0;
		flex-basis: auto;
		max-width: none;
	}

	/** Expended **/
	.c--#{$bp-short} {
		flex-grow: 1;
		flex-basis: auto;
		max-width: none;
	}

	/** No gutters **/
	.grid > .c--#{$bp-short}-noGutter {
		padding-left: 0;
		padding-right: 0;
	}

	/** Gutters **/
	.grid > .c--#{$bp-short}-gutter {
		padding-left: $grid-half-gutter;
		padding-right: $grid-half-gutter;
	}

	.grid[class*='-lgGutter'] > .c--#{$bp-short}-gutter {
		padding-left: $grid-half-gutter-lg;
		padding-right: $grid-half-gutter-lg;
	}

	/** Visibility **/
	.c--#{$bp-short}-hidden {
		display: none;
	}

	.c--#{$bp-short}-visible {
		display: block;
	}

	/** Self justification Y axis **/
	.c--#{$bp-short}-yStretch {
		align-self: stretch;
	}

	.c--#{$bp-short}-yStart {
		align-self: flex-start;
	}

	.c--#{$bp-short}-yCenter {
		align-self: center;
	}

	.c--#{$bp-short}-yEnd {
		align-self: flex-end;
	}

	/** Self justification X axis **/
	.c--#{$bp-short}-xCenter {
		margin-left: auto;
		margin-right: auto;
	}

	.c--#{$bp-short}-xStart {
		margin-right: auto;
	}

	.c--#{$bp-short}-xEnd {
		margin-left: auto;
	}

	/** Order **/
	.c--#{$bp-short}-first {
		order: -1;
	}

	.c--#{$bp-short}-last {
		order: 1;
	}

	.c--#{$bp-short}-ordered {
		order: 0;
	}
}

/** Cell generation **/
@include cell-generation('xs');

@each $bp-short, $bp-size in $grid-breakpoints {
	@media (min-width: $bp-size) {
		@include cell-generation($bp-short);
	}
}
